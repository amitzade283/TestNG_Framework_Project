package testcases;

import java.io.IOException;

import org.testng.annotations.Test;
// As we are extending the BaseClass and it is outside the package, so will have to import the BaseClass
import com.resources.BaseClass;
import com.resources.commonMethods;
import com.resources.constants;

import PageObjectModel.HomePageObjects;
import PageObjectModel.RegistrationPageObjects;

public class RegisterTestCases extends BaseClass {
// As we are extending the BaseClass and it is outside the package, so will have to import the BaseClass	
	
	// We have declared a public variable in which the random email address will be stored
	public static String randomEmail="";		 
	
	// All the test cases are running in Ascending Order
    // Run on No 3
	@Test(enabled = true)
	public void verifyRegistrationWithInValidData() throws IOException, InterruptedException {
		// Calling this method from BaseClass to launch the browser, because the browser
		// launch code is inside that method
		// To call this method, it doesn't need to create an object, because we are
		// calling this method inside the another
		// -method and not inside the main method
		// Here we have used on of the OOPS concept "Inheritance"
		// initializedriver(); We have commented this because we have declare this
		// BeforeClass in BaseClass
		// Launching the url by using BaseClass class driver object
		// This "driver" have scope because its coming from BaseClass
		// driver.get("https://naveenautomationlabs.com/opencart/index.php?route=account/register");
		// We have commented this because we have written this in HomePageObjects,so
		// here we will call just method
				
		// We will not write the xpath as follows
		// driver.findElement(By.xpath("//input[@name='firstname']")).sendKeys("TestFirst");
		// Now we will call the public methods from RegistrationPageObjects class which
		// will return the xpath and also
		// -Encapsulation is achieved here
		// To call that methods

		// Why we are not writing as
		// driver.findElement(By.xpath("//input[@name='firstname']")).sendKeys("TestFirst");
		// -because if the name element is changed in future, then we will have to find
		// it in the test cases class,
		// But if we declare xpath's in RegistrationPageObjects class or in a different
		// class, then it will be easy to find
		// -the xpath to change it. To avoid the complexity in TestCases class, we have
		// to write by this way.
		RegistrationPageObjects rpo = new RegistrationPageObjects(driver);
		
		// Here we have used Method Overriding, because we have used same method name with same parameters
		commonMethods.expliciteWaits(driver,3, rpo.enterfirstname());
		
		rpo.enterfirstname().clear();
		rpo.enterfirstname().sendKeys(constants.firstname);
        
		rpo.enterlastname().clear();
		rpo.enterlastname().sendKeys(constants.lastname);
        
		rpo.enteremail().clear();
		rpo.enteremail().sendKeys(constants.invalidEmail);
        
		rpo.entertelephone().clear();
		rpo.entertelephone().sendKeys(constants.telephone);
        
		rpo.enterpassword().clear();
		rpo.enterpassword().sendKeys(constants.password);
        
		rpo.enterconfirmpw().clear();
		rpo.enterconfirmpw().sendKeys(constants.confirmpassword);

		rpo.clickOnSubscribe().click();

		rpo.clickOnPrivacyPolicy().click();

		rpo.clickOnContinue().click();
		
		commonMethods.handleAssertions(driver.getCurrentUrl(), constants.RegistrationPageurl);

	}

	//Run on No 4
	@Test(enabled = true)
	public void verifyRegistrationWithValidData() throws InterruptedException {
		
		// We have stored the random email generated by generateRandomEmail method written in BaseClass
		randomEmail=generateRandomEmail();
		
		RegistrationPageObjects rpo = new RegistrationPageObjects(driver);

		// We have created a method of explicite waits in commonMethods class and used here instead of Thred.sleep 
		commonMethods.expliciteWaits(driver,3, rpo.enterfirstname());
		
		rpo.enterfirstname().clear();
		rpo.enterfirstname().sendKeys(constants.firstname);
        
		rpo.enterlastname().clear();
		rpo.enterlastname().sendKeys(constants.lastname);

		rpo.enteremail().clear();
		rpo.enteremail().sendKeys(randomEmail);
		System.out.println(randomEmail);

		rpo.entertelephone().clear();
		rpo.entertelephone().sendKeys(constants.telephone);
        
		rpo.enterpassword().clear();
		rpo.enterpassword().sendKeys(constants.password);
        
		rpo.enterconfirmpw().clear();
		rpo.enterconfirmpw().sendKeys(constants.confirmpassword);

		rpo.clickOnSubscribe().click();

		rpo.clickOnPrivacyPolicy().click();

		rpo.clickOnContinue().click();

		//SoftAssert as = new SoftAssert();

		//String successUrl = "https://naveenautomationlabs.com/opencart/index.php?route=account/success";

		//as.assertEquals(driver.getCurrentUrl(), constants.AccountsuccessUrl);

		//as.assertAll();
		
		// 
		commonMethods.handleAssertions(driver.getCurrentUrl(), constants.AccountsuccessUrl);

	}

	//Run on No 1
	@Test(enabled = true)
	public void verifyRegistrationWithBlankData() throws InterruptedException {
		
		Thread.sleep(2000);

		HomePageObjects hpo = new HomePageObjects(driver);
		
		commonMethods.expliciteWaits(driver,3, hpo.clickOnMyAccount());
		
		hpo.clickOnMyAccount().click();

		hpo.clickOnRegister().click();

		RegistrationPageObjects rpo = new RegistrationPageObjects(driver);

		commonMethods.expliciteWaits(driver,3, rpo.enterfirstname());
		
		rpo.enterfirstname().sendKeys(constants.firstname1);

		rpo.enterlastname().sendKeys(constants.lastname1);

		rpo.enteremail().sendKeys(constants.Email1);

		rpo.entertelephone().sendKeys(constants.telephone1);

		rpo.enterpassword().sendKeys(constants.password1);

		rpo.enterconfirmpw().sendKeys(constants.confirmpassword1);

		rpo.clickOnSubscribe().click();

		// rpo.clickOnPrivacyPolicy().click();
		
		rpo.clickOnContinue().click();

		//SoftAssert as = new SoftAssert();

		//String FirstNameErrorMsg = "First Name must be between 1 and 32 characters!";
		//String LastNameErrorMsg = "Last Name must be between 1 and 32 characters!";
		//String EmailErrorMsg = "E-Mail Address does not appear to be valid!";
		//String TelephoneErrorMsg = "Telephone must be between 3 and 32 characters!";
		//String PasswordErrorMsg = "Password must be between 4 and 20 characters!";
		//String PrivacyPolicyErrorMsg = "Warning: You must agree to the Privacy Policy!";

		commonMethods.handleAssertions(rpo.FirstNameErrorMsg().getText(), constants.FirstNameErrorMsg);
		commonMethods.handleAssertions(rpo.LastNameErrorMsg().getText(), constants.LastNameErrorMsg);
		commonMethods.handleAssertions(rpo.BlankEmailErrorMsg().getText(), constants.EmailErrorMsg);
		commonMethods.handleAssertions(rpo.telephoneErrorMsg().getText(), constants.TelephoneErrorMsg);
		commonMethods.handleAssertions(rpo.PasswordErrorMsg().getText(), constants.PasswordErrorMsg);
		commonMethods.handleAssertions(rpo.privacypolicyErrorMsg().getText(), constants.PrivacyPolicyErrorMsg);

		//as.assertAll();
	}

	//Run on No 2
	@Test(enabled = true)
	public void verifyRegistrationWithExistingData() throws InterruptedException {
		
		RegistrationPageObjects rpo = new RegistrationPageObjects(driver);
		
		commonMethods.expliciteWaits(driver,3, rpo.enterfirstname());
        
		rpo.enterfirstname().clear();
		rpo.enterfirstname().sendKeys(constants.firstname);
		
		rpo.enterlastname().clear();
		rpo.enterlastname().sendKeys(constants.lastname);
		
		rpo.enteremail().clear();
		rpo.enteremail().sendKeys(constants.existingEmail);
		
		rpo.entertelephone().clear();
		rpo.entertelephone().sendKeys(constants.telephone);
		
		rpo.enterpassword().clear();
		rpo.enterpassword().sendKeys(constants.password);
		
		rpo.enterconfirmpw().clear();		
		rpo.enterconfirmpw().sendKeys(constants.confirmpassword);
		
		rpo.clickOnSubscribe().click();		
		
		rpo.clickOnPrivacyPolicy().click();
		
		rpo.clickOnContinue().click();

		//SoftAssert as = new SoftAssert();

		//String ExistingEmailErrorMsg = "Warning: E-Mail Address is already registered!";

		commonMethods.handleAssertions(rpo.ExisitingEmailErrorMsg().getText(), constants.ExistingEmailErrorMsg);

		//as.assertAll();
	}
}
